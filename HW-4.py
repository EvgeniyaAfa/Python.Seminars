#_________________________________________Semnar 4_________________________________________


# #Пользователь вводит текст(строка).
# # Словом считается последовательность непробельных символов идущих подряд,
# # слова разделены одним или большим числом пробелов.
# # Определите, сколько различных слов содержится в этом тексте.

# text = (input("Введите текст: "))
# text = text.split() ## удаляет пробелы

# text = set(text) ## перепрописываем в теест - множество
# print(text)
# print(len(text)) ##узнали длину множества



# set = {text}

# print(type(text))
# set.remove(" ")
# print(set)

# Напишите программу, которая принимает на вход строку и отслживавет, сколько раз символ встречался
#Количество повторов добавляется к символу с помощью постфикса -n
# text = ("d g h s d g h s t r i")
# print(text)
# list_1 = text.split()## убрали пробелы  преобразовали все в список
# dict = {} ## создали пустой словарь
# list = [] ## создали пустой список

# for letter in list_1 : ## проходимся циклом по списку
#     dict[letter]  = dict.get(letter, 0) + 1 ## в словарь по букве присвой словарь.положи аругменты буква, 0 +1 
#     if  dict.get(letter) > 1:
#         list.append(letter + '_' + str(dict.get(letter)))
#     else:
#          list.append(letter)

# print(' '.join(list))     

# #Задача 2

# text = input("Введите текст:  ")
# text = text.split()
# text = set(text)
# print(text)
# print (len(text))  



# Дана последовательность чисел. Получить список уникальных элементов заданной последовательности.

# *Пример:*

# [1, 2, 3, 5, 1, 5, 3, 10] => [2, 10]  
# numbers = [1, 2, 3, 5 , 1, 5, 3, 10]
# print(numbers)

# list = list()
# for i in numbers:
#         if numbers.count(i) == 1:
#          list.append(i)

# print(list)    
        
##___________________________________HomeWork_______________________________________

##Даны два неупорядоченных набора целых чисел (может быть, с повторениями). 
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах. 
# Пользователь вводит 2 числа. n - кол-во элементов первого множества. m - кол-во элементов второго множества. 
# Затем пользователь вводит сами элементы множеств.
# Пример:
# 11 6
# 2 4 6 8 10 12 10 8 6 4 2
# 3 6 9 12 15 18
# 6 12

# my_list = []
# n = int(input("Input count of list1:   "))
# for i in range(n):
#     elem = int(input("Input element of list:  "))
#     my_list.append(elem)
# my_list.sort()    
# print(my_list)   
    
    
# my_list_1 = []
# m = int(input("Input count of list2:   "))
# for j in range(m):
#     element = int(input("Input element of list:  "))
#     my_list_1.append(element)
# my_list_1.sort()    
# print(my_list_1) 

# my_list_3 = []
# for i in my_list:
#     for j in my_list_1:
#         if i == j:
#             my_list_3.append(i)
# print(*my_list_3)

# черника растет на круглой грядке, причем кусты высажены только по окружности. 
# Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растет N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное число ягод – на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. 
# Эта система состоит из управляющего модуля и нескольких собирающих модулей. Собирающий модуль за один заход, 
# находясь непосредственно перед некоторым кустом, собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать за один заход собирающий модуль, 
# находясь перед некоторым кустом заданной во входном файле грядки.
# Пример:
# 4 -> 1 2 3 4
# # 9
# import random 
# n = int(input("Input quantity of bushes: "))
# bushes = [random.randint(0, 100) for i in range(n)]
# print(bushes)
# max_b = []
# for i in range(n):
#     if i == 0:
#         before = -1
#         next = i + 1
#     elif i == n - 1: 
#         next = 0
#         before = i -1
#     else:
#         before = i - 1
#         next = i + 1
#     max_b.append(bushes[before] + bushes[next] + bushes[i]) 

# print(max(max_b))          
            
